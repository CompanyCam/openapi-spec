#! /usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("@actions/core"));
const chalk_1 = __importDefault(require("chalk"));
const update_notifier_cjs_1 = __importDefault(require("update-notifier-cjs"));
const package_json_1 = __importDefault(require("../package.json"));
const isCI_1 = require("./lib/isCI");
const _1 = __importDefault(require("."));
(0, update_notifier_cjs_1.default)({ pkg: package_json_1.default }).notify();
(0, _1.default)(process.argv.slice(2))
    .then((msg) => {
    if (msg) {
        // eslint-disable-next-line no-console
        console.log(msg);
        if ((0, isCI_1.isGHA)()) {
            core.setOutput('rdme', msg);
        }
    }
    return process.exit(0);
})
    .catch((err) => {
    let message = `Yikes, something went wrong! Please try again and if the problem persists, get in touch with our support team at ${chalk_1.default.underline('support@readme.io')}.`;
    if (err.message) {
        message = err.message;
    }
    /**
     * If we're in a GitHub Actions environment, log errors with that formatting instead.
     *
     * @see {@link https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message}
     * @see {@link https://github.com/actions/toolkit/tree/main/packages/core#annotations}
     */
    if ((0, isCI_1.isGHA)()) {
        return core.setFailed(message);
    }
    // If this is a soft error then we should output the result as a regular log but exit the CLI
    // with an error status code.
    if (err.name === 'SoftError') {
        // eslint-disable-next-line no-console
        console.log(err.message);
    }
    else {
        // eslint-disable-next-line no-console
        console.error(chalk_1.default.red(`\n${message}\n`));
    }
    return process.exit(1);
});
