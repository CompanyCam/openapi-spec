"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/first, import/order, no-underscore-dangle */
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const command_line_args_1 = __importDefault(require("command-line-args"));
const string_argv_1 = __importDefault(require("string-argv"));
// We have to do this otherwise `require('config')` loads
// from the cwd where the user is running `rdme` which
// wont be what we want
//
// This is a little sketchy overwriting environment variables
// but since this is only supposed to be a cli and not
// requireable, i think this is okay
const configDir = process.env.NODE_CONFIG_DIR;
process.env.NODE_CONFIG_DIR = path_1.default.join(__dirname, '../config');
const config_1 = __importDefault(require("config"));
process.env.NODE_CONFIG_DIR = configDir;
const package_json_1 = require("../package.json");
const commands = __importStar(require("./lib/commands"));
const help = __importStar(require("./lib/help"));
const logger_1 = require("./lib/logger");
const createGHA_1 = __importDefault(require("./lib/createGHA"));
const getCurrentConfig_1 = __importDefault(require("./lib/getCurrentConfig"));
/**
 * @param {Array} processArgv - An array of arguments from the current process. Can be used to mock
 *    fake CLI calls.
 * @return {Promise}
 */
function rdme(rawProcessArgv) {
    const mainArgs = [
        { name: 'help', alias: 'h', type: Boolean, description: 'Display this usage guide' },
        {
            name: 'version',
            alias: 'v',
            type: Boolean,
            description: `Show the current ${config_1.default.get('cli')} version (v${package_json_1.version})`,
        },
        { name: 'command', type: String, defaultOption: true },
    ];
    let processArgv = rawProcessArgv;
    (0, logger_1.debug)(`raw process.argv: ${JSON.stringify(rawProcessArgv)}`);
    /**
     * We have a weird edge case with our Docker image version of `rdme` where GitHub Actions
     * will pass all of the `rdme` arguments as a single string with escaped quotes,
     * as opposed to the usual array of strings that we typically expect with `process.argv`.
     *
     * For example, say the user sends us `rdme openapi "petstore.json"`.
     * Instead of `process.argv` being this (i.e., when running the command via CLI):
     * ['openapi', 'petstore.json']
     *
     * The GitHub Actions runner will send this to the `rdme` Docker image:
     * ['openapi "petstore.json"']
     *
     * To distinguish these, we have a hidden `docker-gha` argument which we check for to indicate
     * when arguments are coming from the GitHub Actions runner.
     * This logic checks for that `docker-gha` argument and parses the second string
     * into the arguments array that `command-line-args` is expecting.
     */
    if (rawProcessArgv.length === 2 && rawProcessArgv[0] === 'docker-gha') {
        processArgv = (0, string_argv_1.default)(rawProcessArgv[1]);
        (0, logger_1.debug)(`parsing arg string into argv: ${JSON.stringify(processArgv)}`);
    }
    const argv = (0, command_line_args_1.default)(mainArgs, { partial: true, argv: processArgv });
    const cmd = argv.command || false;
    (0, logger_1.debug)(`command-line-args processing: ${JSON.stringify(argv)}`);
    // Add support for `-V` as an additional `--version` alias.
    if (typeof argv._unknown !== 'undefined') {
        if (argv._unknown.indexOf('-V') !== -1) {
            argv.version = true;
        }
    }
    if (argv.version && (!cmd || cmd === 'help'))
        return Promise.resolve(package_json_1.version);
    let command = cmd || '';
    if (!command) {
        command = 'help';
    }
    if (command === 'help') {
        argv.help = true;
    }
    try {
        let cmdArgv;
        let bin;
        // Handling for `rdme help` and `rdme help <command>` cases.
        if (command === 'help') {
            if ((argv._unknown || []).length === 0) {
                return Promise.resolve(help.globalUsage(mainArgs));
            }
            if (argv._unknown.indexOf('-H') !== -1) {
                return Promise.resolve(help.globalUsage(mainArgs));
            }
            cmdArgv = (0, command_line_args_1.default)([{ name: 'subcommand', type: String, defaultOption: true }], {
                argv: argv._unknown,
            });
            if (!cmdArgv.subcommand) {
                return Promise.resolve(help.globalUsage(mainArgs));
            }
            bin = commands.load(cmdArgv.subcommand);
            return Promise.resolve(help.commandUsage(bin));
        }
        bin = commands.load(command);
        // Handling for `rdme <command> --help`.
        if (argv.help) {
            return Promise.resolve(help.commandUsage(bin));
        }
        try {
            cmdArgv = (0, command_line_args_1.default)(bin.args, { argv: argv._unknown || [] });
        }
        catch (e) {
            // If we have a command that has its own `--version` argument to accept data, that argument,
            // if supplied in the `--version VERSION_STRING` format instead of `--version=VERSION_STRING`,
            // will collide with the global version argument because their types differ and the argument
            // parser gets confused.
            //
            // Instead of failing out to the user with an undecipherable "Unknown value: ..." error, let's
            // try to parse their request again but a tad less eager.
            if ((e.name !== 'UNKNOWN_VALUE' || (e.name === 'UNKNOWN_VALUE' && !argv.version)) && argv.command !== 'oas') {
                throw e;
            }
            cmdArgv = (0, command_line_args_1.default)(bin.args, { partial: true, argv: processArgv.slice(1) });
        }
        const { apiKey: key } = (0, getCurrentConfig_1.default)();
        cmdArgv = { key, ...cmdArgv };
        return bin.run(cmdArgv).then((msg) => {
            if (bin.supportsGHA) {
                return (0, createGHA_1.default)(msg, bin.command, bin.args, cmdArgv);
            }
            return msg;
        });
    }
    catch (e) {
        if (e.message === 'Command not found.') {
            e.message = `${e.message}\n\nType \`${chalk_1.default.yellow(`${config_1.default.get('cli')} help`)}\` ${chalk_1.default.red('to see all commands')}`;
        }
        return Promise.reject(e);
    }
}
exports.default = rdme;
