"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSimilar = exports.listByCategory = exports.load = exports.list = void 0;
const cmds_1 = __importDefault(require("../cmds"));
function getCategories() {
    return {
        apis: {
            description: 'OpenAPI / Swagger',
            commands: [],
        },
        docs: {
            description: 'Docs (a.k.a. Guides)',
            commands: [],
        },
        changelogs: {
            description: 'Changelog',
            commands: [],
        },
        custompages: {
            description: 'Custom Pages',
            commands: [],
        },
        versions: {
            description: 'Versions',
            commands: [],
        },
        categories: {
            description: 'Categories',
            commands: [],
        },
        admin: {
            description: 'Administration',
            commands: [],
        },
        utilities: {
            description: 'Other useful commands',
            commands: [],
        },
    };
}
function list() {
    return Object.entries(cmds_1.default).map(([name, Cmd]) => {
        return {
            name,
            command: new Cmd(),
        };
    });
}
exports.list = list;
function load(cmd) {
    if (!(cmd in cmds_1.default)) {
        throw new Error('Command not found.');
    }
    return new cmds_1.default[cmd]();
}
exports.load = load;
function listByCategory() {
    const categories = getCategories();
    const cmds = list();
    cmds.forEach(c => {
        categories[c.command.cmdCategory].commands.push({
            name: c.command.command,
            description: c.command.description,
            hidden: c.command.hidden,
        });
    });
    return categories;
}
exports.listByCategory = listByCategory;
function getSimilar(cmdCategory, excludeCommand) {
    const categories = listByCategory();
    return categories[cmdCategory].commands.filter(cmd => cmd.name !== excludeCommand && !cmd.hidden);
}
exports.getSimilar = getSimilar;
