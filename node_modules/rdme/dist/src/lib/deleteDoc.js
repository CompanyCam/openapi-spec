"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const readmeAPIFetch_1 = __importStar(require("./readmeAPIFetch"));
/**
 * Delete a document from ReadMe
 *
 * @param {String} key the project API key
 * @param {String} selectedVersion the project version
 * @param {Boolean} dryRun boolean indicating dry run mode
 * @param {String} slug The slug of the document to delete
 * @param {String} type module within ReadMe to update (e.g. docs, changelogs, etc.)
 * @returns {Promise<String>} a string containing the result
 */
async function deleteDoc(key, selectedVersion, dryRun, slug, type) {
    if (dryRun) {
        return Promise.resolve(`üé≠ dry run! This will delete \`${slug}\`.`);
    }
    return (0, readmeAPIFetch_1.default)(`/api/v1/${type}/${slug}`, {
        method: 'delete',
        headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
            'x-readme-version': selectedVersion,
            'Content-Type': 'application/json',
        })),
    })
        .then(readmeAPIFetch_1.handleRes)
        .then(() => `üóëÔ∏è  successfully deleted \`${slug}\`.`);
}
exports.default = deleteDoc;
