"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalUsage = exports.commandUsage = void 0;
const chalk_1 = __importDefault(require("chalk"));
const command_line_usage_1 = __importDefault(require("command-line-usage"));
const config_1 = __importDefault(require("config"));
const commands = __importStar(require("./commands"));
function formatCommands(cmds) {
    return cmds
        .sort((a, b) => (a.name > b.name ? 1 : -1))
        .filter(command => !command.hidden)
        .map(command => {
        return {
            name: `${chalk_1.default.grey('$')} ${config_1.default.get('cli')} ${command.name}`,
            summary: command.description,
        };
    });
}
const owlbert = () => {
    // http://asciiart.club
    return `                  📖 ${chalk_1.default.blue.bold(config_1.default.get('cli'))}

    ${chalk_1.default.bold('a utility for interacting with ReadMe')}
       .
       .\\\\                          /.
      ’  ‘                        ‘ ‘
      ( nn\\\\    .           .     /  )
      (nnnnn,.MM.          AM   .nn.
       .nnnndMM----_______--M.’’   /
       |nnn/nnnnnnnnnnnnnnnnn\\\\’mmm/
       /nnnn...nnnnnnnnnnn...mmmmm\\\\
      /nn        ‘qnnnP’       ‘mmm\\\\
      /n’   .XXX. \\\\nnn/   .XX.  \\\\mmb
      An   (XOXX)  nnn   (XOXX)  mm\\\\
     /nn   ‘XXXX’.~”~.   ‘XXX”’ .mmmb
     dnnn.      (    )n.       .mmmmb
    .nnnnnn....n.\\\\ ./nnnnnnnnnmmmmmm\\\\
  (READnnnnnnnnnnn’Y’nnnnnnnnnnmmmmmmME)
  REinnnnnnnnnnnnnnnnnnnnnnnnnmmmmmmmAD/
 /MEEnnnnnnnnnnnnnnnnnnnnnnnnnmmmmmmm)E'.
 READnnnnnnn*’             ‘*mmmmmmmm)MEE.
(READ|nnnn’    \\\\../  \\\\.../    ‘mmmmmM)EEE)
 READ(nn*’                      ‘mmm.MEEE)
  ‘READn’  \\\\._./  \\\\__./  \\\\.../     ‘MEE*’
       *                           /*`;
};
/* : {
    content?: string;
    header?: string;
    optionList?: Command.args[];
    raw?: boolean;
  }[] */
function commandUsage(cmd) {
    const helpContent = [
        {
            content: cmd.description,
            raw: true,
        },
        {
            header: 'Usage',
            content: `${config_1.default.get('cli')} ${cmd.usage}`,
        },
        {
            header: 'Options',
            optionList: [...cmd.args].concat([
                {
                    name: 'help',
                    alias: 'h',
                    type: Boolean,
                    description: 'Display this usage guide',
                },
            ]),
            hide: cmd.hiddenArgs || [],
        },
    ];
    const similarCommands = commands.getSimilar(cmd.cmdCategory, cmd.command);
    if (similarCommands.length) {
        helpContent.push({
            header: 'Related commands',
            content: formatCommands(similarCommands),
        });
    }
    return (0, command_line_usage_1.default)(helpContent);
}
exports.commandUsage = commandUsage;
async function globalUsage(args) {
    const helpContent = [
        {
            content: owlbert(),
            raw: true,
        },
        {
            header: 'Usage',
            content: `${config_1.default.get('cli')} <command> [arguments]`,
        },
        {
            header: 'Options',
            optionList: args,
            hide: ['command'],
        },
    ];
    const categories = commands.listByCategory();
    Object.keys(categories).forEach((key) => {
        const category = categories[key];
        helpContent.push({
            header: category.description,
            content: formatCommands(category.commands),
        });
    });
    helpContent.push({
        content: `Run ${chalk_1.default.dim(`${config_1.default.get('cli')} help <command>`)} for help with a specific command.`,
        raw: true,
    }, {
        content: 'To get more help with ReadMe, check out our docs at https://docs.readme.com.',
        raw: true,
    });
    return (0, command_line_usage_1.default)(helpContent);
}
exports.globalUsage = globalUsage;
