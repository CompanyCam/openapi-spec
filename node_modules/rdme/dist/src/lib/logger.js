"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.warn = exports.oraOptions = exports.info = exports.error = exports.debug = void 0;
const core = __importStar(require("@actions/core"));
const chalk_1 = __importDefault(require("chalk"));
const config_1 = __importDefault(require("config"));
const debug_1 = __importDefault(require("debug"));
const isCI_1 = require("./isCI");
const debugPackage = (0, debug_1.default)(config_1.default.get('cli'));
/**
 * Wrapper for debug statements.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function debug(input) {
    /* istanbul ignore next */
    if ((0, isCI_1.isGHA)() && !(0, isCI_1.isTest)()) {
        if (typeof input === 'object') {
            core.debug(`rdme: ${JSON.stringify(input)}`);
        }
        else {
            core.debug(`rdme: ${input}`);
        }
    }
    return debugPackage(input);
}
exports.debug = debug;
/**
 * Wrapper for error statements.
 */
function error(input) {
    /* istanbul ignore next */
    if ((0, isCI_1.isGHA)() && !(0, isCI_1.isTest)())
        return core.error(input);
    // eslint-disable-next-line no-console
    return console.error(chalk_1.default.red(input));
}
exports.error = error;
/**
 * Wrapper for info/notice statements.

 */
function info(input, opts = {
    /** whether or not to prefix * the statement with this emoji: ℹ️ */
    includeEmojiPrefix: true,
}) {
    /* istanbul ignore next */
    if ((0, isCI_1.isGHA)() && !(0, isCI_1.isTest)())
        return core.notice(input);
    /* istanbul ignore next */
    if (!opts.includeEmojiPrefix)
        return console.info(input); // eslint-disable-line no-console
    // eslint-disable-next-line no-console
    return console.info(`ℹ️  ${input}`);
}
exports.info = info;
function oraOptions() {
    // Disables spinner in tests so it doesn't pollute test output
    const opts = { isSilent: (0, isCI_1.isTest)() };
    // Cleans up ora output so it prints nicely alongside debug logs
    /* istanbul ignore next */
    if (debugPackage.enabled)
        opts.isEnabled = false;
    return opts;
}
exports.oraOptions = oraOptions;
/**
 * Wrapper for warn statements.
 * @param prefix Text that precedes the warning.
 * This is *not* used in the GitHub Actions-formatted warning.
 */
function warn(input, prefix = 'Warning!') {
    /* istanbul ignore next */
    if ((0, isCI_1.isGHA)() && !(0, isCI_1.isTest)())
        return core.warning(input);
    // eslint-disable-next-line no-console
    return console.warn(chalk_1.default.yellow(`⚠️  ${prefix} ${input}`));
}
exports.warn = warn;
