"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectVersion = void 0;
const apiError_1 = __importDefault(require("./apiError"));
const isCI_1 = __importDefault(require("./isCI"));
const logger_1 = require("./logger");
const promptWrapper_1 = __importDefault(require("./promptWrapper"));
const readmeAPIFetch_1 = __importStar(require("./readmeAPIFetch"));
/**
 * Validates and returns a project version.
 *
 * @param versionFlag version input parameter
 * @param key project API key
 * @returns a cleaned up project version
 */
async function getProjectVersion(versionFlag, key, returnStable = false) {
    try {
        if (versionFlag) {
            return await (0, readmeAPIFetch_1.default)(`/api/v1/version/${versionFlag}`, {
                method: 'get',
                headers: (0, readmeAPIFetch_1.cleanHeaders)(key),
            })
                .then(readmeAPIFetch_1.handleRes)
                .then((res) => res.version);
        }
        if ((0, isCI_1.default)()) {
            (0, logger_1.warn)('No `--version` parameter detected in current CI environment. Defaulting to main version.');
            return undefined;
        }
        const versionList = await (0, readmeAPIFetch_1.default)('/api/v1/version', {
            method: 'get',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key),
        }).then(readmeAPIFetch_1.handleRes);
        if (versionList.length === 1) {
            return versionList[0].version;
        }
        if (returnStable) {
            const stableVersion = versionList.find(v => v.is_stable === true);
            return stableVersion.version;
        }
        const { versionSelection } = await (0, promptWrapper_1.default)({
            type: 'select',
            name: 'versionSelection',
            message: 'Select your desired version',
            choices: versionList.map(v => {
                return {
                    title: v.version,
                    value: v.version,
                };
            }),
        });
        return versionSelection;
    }
    catch (err) {
        return Promise.reject(new apiError_1.default(err));
    }
}
exports.getProjectVersion = getProjectVersion;
