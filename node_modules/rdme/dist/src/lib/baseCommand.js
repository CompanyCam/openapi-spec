"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandCategories = void 0;
const chalk_1 = __importDefault(require("chalk"));
const configstore_1 = __importDefault(require("./configstore"));
const getCurrentConfig_1 = __importDefault(require("./getCurrentConfig"));
const isCI_1 = __importDefault(require("./isCI"));
const logger_1 = require("./logger");
const loginFlow_1 = __importDefault(require("./loginFlow"));
var CommandCategories;
(function (CommandCategories) {
    CommandCategories["ADMIN"] = "admin";
    CommandCategories["APIS"] = "apis";
    CommandCategories["CATEGORIES"] = "categories";
    CommandCategories["CHANGELOGS"] = "changelogs";
    CommandCategories["CUSTOM_PAGES"] = "custompages";
    CommandCategories["DOCS"] = "docs";
    CommandCategories["UTILITIES"] = "utilities";
    CommandCategories["VERSIONS"] = "versions";
})(CommandCategories || (exports.CommandCategories = CommandCategories = {}));
class Command {
    constructor() {
        /**
         * Should the command be hidden from our `--help` screens?
         */
        this.hidden = false;
        /**
         * Does the command run the GitHub Actions onboarding called via
         * `src/index.ts`?
         */
        this.supportsGHA = false;
        /**
         * Arguments to hide from the individual command help screen
         * (typically used for hiding default arguments)
         *
         * @example ['spec']
         */
        this.hiddenArgs = [];
    }
    async run(opts) {
        Command.debug(`command: ${this.command}`);
        Command.debug(`opts: ${JSON.stringify(opts)}`);
        if (this.args.some(arg => arg.name === 'key')) {
            const { email, project } = (0, getCurrentConfig_1.default)();
            // We only want to log this if the API key is stored in the configstore, **not** in an env var.
            if (opts.key && configstore_1.default.get('apiKey') === opts.key) {
                (0, logger_1.info)(`ðŸ”‘ ${chalk_1.default.green(email)} is currently logged in, using the stored API key for this project: ${chalk_1.default.blue(project)}`, { includeEmojiPrefix: false });
            }
            if (!opts.key) {
                if ((0, isCI_1.default)()) {
                    throw new Error('No project API key provided. Please use `--key`.');
                }
                (0, logger_1.info)("Looks like you're missing a ReadMe API key, let's fix that! ðŸ¦‰", { includeEmojiPrefix: false });
                const result = await (0, loginFlow_1.default)();
                (0, logger_1.info)(result, { includeEmojiPrefix: false });
                // eslint-disable-next-line no-param-reassign
                opts.key = configstore_1.default.get('apiKey');
            }
        }
        if (opts.github && (0, isCI_1.default)()) {
            throw new Error('The `--github` flag is only for usage in non-CI environments.');
        }
        // This is a bit of a hack so we can keep our types consistent
        // for this `run` function.
        return Promise.resolve('');
    }
    /**
     * Used in any command where `github` is an option.
     */
    getGitHubArg() {
        return {
            name: 'github',
            type: Boolean,
            description: 'Create a new GitHub Actions workflow for this command.',
        };
    }
    /**
     * Used in any command where `key` is an option.
     */
    getKeyArg() {
        return {
            name: 'key',
            type: String,
            description: 'Project API key',
        };
    }
    /**
     * Used in the `openapi` family of commands where `title` is an option.
     */
    getTitleArg() {
        return {
            name: 'title',
            type: String,
            description: 'An override value for the `info.title` field in the API definition',
        };
    }
    /**
     * Used in any command where `version` is an option.
     */
    getVersionArg() {
        return {
            name: 'version',
            type: String,
            description: 'Project version. If running command in a CI environment and this option is not passed, the main project version will be used.',
        };
    }
    /**
     * Used in the `versions:create` and `versions:update` commands.
     */
    getVersionOpts() {
        return [
            {
                name: 'version',
                type: String,
                defaultOption: true,
            },
            {
                name: 'codename',
                type: String,
                description: 'The codename, or nickname, for a particular version.',
            },
            {
                name: 'main',
                type: String,
                description: "Should this version be the primary (default) version for your project? (Must be 'true' or 'false')",
            },
            {
                name: 'beta',
                type: String,
                description: "Is this version in beta? (Must be 'true' or 'false')",
            },
            {
                name: 'deprecated',
                type: String,
                description: "Would you like to deprecate this version? (Must be 'true' or 'false')",
            },
            {
                name: 'isPublic',
                type: String,
                description: "Would you like to make this version public? Any primary version must be public. (Must be 'true' or 'false')",
            },
        ];
    }
    /**
     * Used in the `openapi` family of commands where `workingDirectory` is an option.
     */
    getWorkingDirArg() {
        return {
            name: 'workingDirectory',
            type: String,
            description: 'Working directory (for usage with relative external references)',
        };
    }
    static debug(msg) {
        (0, logger_1.debug)(msg);
    }
    static info(msg) {
        (0, logger_1.info)(msg);
    }
    static warn(msg) {
        (0, logger_1.warn)(msg);
    }
}
exports.default = Command;
