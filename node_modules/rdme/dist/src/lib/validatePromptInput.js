"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSubdomain = exports.validateFilePath = exports.cleanFileName = void 0;
const fs_1 = __importDefault(require("fs"));
/**
 * Removes any non-alphanumeric characters and replaces them with hyphens.
 *
 * This is used for file names and for YAML keys.
 */
const cleanFileName = (input) => input.replace(/[^a-z0-9]/gi, '-');
exports.cleanFileName = cleanFileName;
/**
 * A validator function used in our prompts for when a user
 * is prompted to specify a file path.
 *
 * @param value the file name
 * @param getFullPath An optional function for adding a file path or any filename validations
 * @returns true if path is valid (i.e. is non-empty and doesn't already exist),
 * otherwise a string containing the error message
 */
function validateFilePath(value, getFullPath = file => file) {
    if (value.length) {
        const fullPath = getFullPath(value);
        if (!fs_1.default.existsSync(fullPath)) {
            return true;
        }
        return 'Specified output path already exists.';
    }
    return 'An output path must be supplied.';
}
exports.validateFilePath = validateFilePath;
/**
 * Validates that a project subdomain value is valid.
 *
 * @param value the terminal input
 * @returns true if the subdomain value is valid, else an error message
 */
function validateSubdomain(value) {
    return (/^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$/.test(value) || 'Project subdomain must contain only letters, numbers and dashes.');
}
exports.validateSubdomain = validateSubdomain;
