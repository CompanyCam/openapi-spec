"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const getCategories_1 = __importDefault(require("./getCategories"));
const readmeAPIFetch_1 = __importStar(require("./readmeAPIFetch"));
function flatten(data) {
    const allDocs = [];
    const docs = [].concat(...data);
    docs.forEach(doc => {
        allDocs.push(doc);
        if (doc.children) {
            doc.children.forEach(child => {
                allDocs.push(child);
            });
        }
    });
    // Docs with children cannot be deleted unless the children are deleted first,
    // so move those parent docs to the back of the list
    allDocs.sort(a => (a.children?.length ? 1 : -1));
    return allDocs;
}
async function getCategoryDocs(key, selectedVersion, category) {
    return (0, readmeAPIFetch_1.default)(`/api/v1/categories/${category}/docs`, {
        method: 'get',
        headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
            'x-readme-version': selectedVersion,
            'Content-Type': 'application/json',
        })),
    }).then(readmeAPIFetch_1.handleRes);
}
/**
 * Retrieve the docs under all categories
 *
 * @param {String} key the project API key
 * @param {String} selectedVersion the project version
 * @returns {Promise<Array<Document>>} an array containing the docs
 */
async function getDocs(key, selectedVersion) {
    return (0, getCategories_1.default)(key, selectedVersion)
        .then(categories => categories.filter(({ type }) => type === 'guide'))
        .then(categories => categories.map(({ slug }) => getCategoryDocs(key, selectedVersion, slug)))
        .then(categoryDocsPromises => Promise.all(categoryDocsPromises))
        .then(flatten);
}
exports.default = getDocs;
