"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ignore_1 = __importDefault(require("ignore"));
const logger_1 = require("./logger");
/**
 * Recursively grabs all files within a given directory
 * (including subdirectories)
 * @param folderToSearch path to directory
 * @param ignoreGit boolean to indicate whether or not to ignore
 * `.git` directory plus any files specified in `.gitignore`
 * @returns array of file names
 */
function readdirRecursive(folderToSearch, ignoreGit = false) {
    (0, logger_1.debug)(`current readdirRecursive folder: ${folderToSearch}`);
    let ignoreFilter;
    if (ignoreGit) {
        // Initialize ignore filter with `.git` directory
        ignoreFilter = (0, ignore_1.default)().add(path_1.default.join(folderToSearch, '.git/'));
        // If .gitignore file exists, load its contents into ignore filter
        if (fs_1.default.existsSync(path_1.default.join(folderToSearch, '.gitignore'))) {
            (0, logger_1.debug)('.gitignore file found, adding to ignore filter');
            ignoreFilter.add(fs_1.default.readFileSync(path_1.default.join(folderToSearch, '.gitignore')).toString());
        }
    }
    const filesInFolder = fs_1.default.readdirSync(folderToSearch, { withFileTypes: true }).filter(item => {
        if (!ignoreGit)
            return true;
        // Some logic to construct pathname the way that `ignore` package consumes it
        // https://github.com/kaelzhang/node-ignore#2-filenames-and-dirnames
        let fullPathName = path_1.default.join(folderToSearch, item.name);
        if (item.isDirectory())
            fullPathName = `${fullPathName}/`;
        return !ignoreFilter.ignores(fullPathName);
    });
    const files = filesInFolder
        .filter(fileHandle => fileHandle.isFile())
        .map(fileHandle => path_1.default.join(folderToSearch, fileHandle.name));
    const folders = filesInFolder.filter(fileHandle => fileHandle.isDirectory());
    const subFiles = [].concat(...folders.map(fileHandle => readdirRecursive(path_1.default.join(folderToSearch, fileHandle.name), ignoreGit)));
    return [...files, ...subFiles];
}
exports.default = readdirRecursive;
