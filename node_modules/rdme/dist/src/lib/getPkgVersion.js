"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMajorPkgVersion = exports.getPkgVersion = exports.getNodeVersion = void 0;
// eslint-disable-next-line no-restricted-imports
const node_fetch_1 = __importDefault(require("node-fetch"));
const semver_1 = __importDefault(require("semver"));
const package_json_1 = __importDefault(require("../../package.json"));
const logger_1 = require("./logger");
const registryUrl = 'https://registry.npmjs.com/rdme';
/**
 * Return the major Node.js version specified in our `package.json` config.
 *
 * @example 14
 */
function getNodeVersion() {
    const { node } = package_json_1.default.engines;
    return semver_1.default.minVersion(node).major;
}
exports.getNodeVersion = getNodeVersion;
/**
 * The current `rdme` version
 *
 * @param npmDistTag the `npm` dist tag to retrieve. If this value is omitted,
 * the version from the `package.json` is returned.
 * @example "8.0.0"
 * @see {@link https://docs.npmjs.com/adding-dist-tags-to-packages}
 * @note we mock this function in our snapshots, hence it's not the default
 * @see {@link https://stackoverflow.com/a/54245672}
 */
async function getPkgVersion(npmDistTag) {
    if (npmDistTag) {
        return (0, node_fetch_1.default)(registryUrl)
            .then(res => res.json())
            .then(body => body['dist-tags'][npmDistTag])
            .catch(err => {
            (0, logger_1.error)(`error fetching version from npm registry: ${err.message}`);
            return package_json_1.default.version;
        });
    }
    return package_json_1.default.version;
}
exports.getPkgVersion = getPkgVersion;
/**
 * The current major `rdme` version
 *
 * @example 8
 */
const getMajorPkgVersion = async (npmDistTag) => semver_1.default.major(await getPkgVersion(npmDistTag));
exports.getMajorPkgVersion = getMajorPkgVersion;
