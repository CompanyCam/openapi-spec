"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const isEmail_1 = __importDefault(require("validator/lib/isEmail"));
const configstore_1 = __importDefault(require("./configstore"));
const getCurrentConfig_1 = __importDefault(require("./getCurrentConfig"));
const logger_1 = require("./logger");
const promptWrapper_1 = __importDefault(require("./promptWrapper"));
const readmeAPIFetch_1 = __importStar(require("./readmeAPIFetch"));
const validatePromptInput_1 = require("./validatePromptInput");
function loginFetch(body) {
    return (0, readmeAPIFetch_1.default)('/api/v1/login', {
        method: 'post',
        headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
    });
}
/**
 * The prompt flow for logging a user in and writing the credentials to
 * `configstore`. This is a separate lib function because we reuse it both
 * in the `login` command as well as any time a user omits an API key.
 * @param otp an optional one-time passcode, if the user passes one in
 * via a flag to the the `login` command
 * @returns A Promise-wrapped string with the logged-in user's credentials
 */
async function loginFlow(otp) {
    const storedConfig = (0, getCurrentConfig_1.default)();
    const { email, password, project } = await (0, promptWrapper_1.default)([
        {
            type: 'text',
            name: 'email',
            message: 'What is your email address?',
            initial: storedConfig.email,
            validate(val) {
                return (0, isEmail_1.default)(val) ? true : 'Please provide a valid email address.';
            },
        },
        {
            type: 'invisible',
            name: 'password',
            message: 'What is your password?',
        },
        {
            type: 'text',
            name: 'project',
            message: 'What project subdomain are you logging into?',
            initial: storedConfig.project,
            validate: validatePromptInput_1.validateSubdomain,
        },
    ]);
    if (!project) {
        return Promise.reject(new Error('No project subdomain provided. Please use `--project`.'));
    }
    if (!(0, isEmail_1.default)(email)) {
        return Promise.reject(new Error('You must provide a valid email address.'));
    }
    const payload = { email, password, project };
    // if the user passed in a `otp` option, include that in the login payload
    if (otp)
        payload.token = otp;
    return loginFetch(payload)
        .then(readmeAPIFetch_1.handleRes)
        .catch(async (err) => {
        // if the user's login requires 2FA, let's prompt them for the token!
        if (err.code === 'LOGIN_TWOFACTOR') {
            (0, logger_1.debug)('2FA error response, prompting for 2FA code');
            const otpPrompt = await (0, promptWrapper_1.default)({
                type: 'text',
                name: 'otp',
                message: 'What is your 2FA token?',
            });
            return loginFetch({ email, password, project, token: otpPrompt.otp }).then(readmeAPIFetch_1.handleRes);
        }
        throw err;
    })
        .then(res => {
        configstore_1.default.set('apiKey', res.apiKey);
        configstore_1.default.set('email', email);
        configstore_1.default.set('project', project);
        return `Successfully logged in as ${chalk_1.default.green(email)} to the ${chalk_1.default.blue(project)} project.`;
    });
}
exports.default = loginFlow;
