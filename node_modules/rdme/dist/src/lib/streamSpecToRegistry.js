"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const form_data_1 = __importDefault(require("form-data"));
const ora_1 = __importDefault(require("ora"));
const tmp_promise_1 = require("tmp-promise");
const logger_1 = require("./logger");
const readmeAPIFetch_1 = __importStar(require("./readmeAPIFetch"));
/**
 * Uploads a spec to the API registry for usage in ReadMe
 *
 * @param {String} spec path to a bundled/validated spec file
 * @returns {String} a UUID in the API registry
 */
async function streamSpecToRegistry(spec) {
    const spinner = (0, ora_1.default)({ text: 'Staging your API definition for upload...', ...(0, logger_1.oraOptions)() }).start();
    // Create a temporary file to write the bundled spec to,
    // which we will then stream into the form data body
    const { path } = await (0, tmp_promise_1.file)({ prefix: 'rdme-openapi-', postfix: '.json' });
    (0, logger_1.debug)(`creating temporary file at ${path}`);
    await fs_1.default.writeFileSync(path, spec);
    const stream = fs_1.default.createReadStream(path);
    (0, logger_1.debug)('file and stream created, streaming into form data payload');
    const formData = new form_data_1.default();
    formData.append('spec', stream);
    const options = {
        body: formData,
        headers: {
            Accept: 'application/json',
        },
        method: 'POST',
    };
    return (0, readmeAPIFetch_1.default)('/api/v1/api-registry', options)
        .then(readmeAPIFetch_1.handleRes)
        .then(body => {
        spinner.stop();
        return body.registryUUID;
    })
        .catch(e => {
        spinner.fail();
        throw e;
    });
}
exports.default = streamSpecToRegistry;
