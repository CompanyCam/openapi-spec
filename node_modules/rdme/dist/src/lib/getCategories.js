"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const readmeAPIFetch_1 = __importStar(require("./readmeAPIFetch"));
/**
 * Returns all categories for a given project and version
 *
 * @param {String} key project API key
 * @param {String} selectedVersion project version
 * @returns An array of category objects
 */
async function getCategories(key, selectedVersion) {
    function getNumberOfPages() {
        let totalCount = 0;
        return (0, readmeAPIFetch_1.default)('/api/v1/categories?perPage=20&page=1', {
            method: 'get',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                'x-readme-version': selectedVersion,
                Accept: 'application/json',
            })),
        })
            .then(res => {
            totalCount = Math.ceil(parseInt(res.headers.get('x-total-count'), 10) / 20);
            return (0, readmeAPIFetch_1.handleRes)(res);
        })
            .then(res => {
            return { firstPage: res, totalCount };
        });
    }
    const { firstPage, totalCount } = await getNumberOfPages();
    const allCategories = firstPage.concat(...(await Promise.all(
    // retrieves all categories beyond first page
    [...new Array(totalCount + 1).keys()].slice(2).map(async (page) => {
        return (0, readmeAPIFetch_1.default)(`/api/v1/categories?perPage=20&page=${page}`, {
            method: 'get',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                'x-readme-version': selectedVersion,
                Accept: 'application/json',
            })),
        }).then(readmeAPIFetch_1.handleRes);
    }))));
    return allCategories;
}
exports.default = getCategories;
