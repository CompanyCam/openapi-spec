"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const config_1 = __importDefault(require("config"));
const node_fetch_1 = require("node-fetch");
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const getCategories_1 = __importDefault(require("../../lib/getCategories"));
const readmeAPIFetch_1 = __importStar(require("../../lib/readmeAPIFetch"));
const versionSelect_1 = require("../../lib/versionSelect");
class CategoriesCreateCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'categories:create';
        this.usage = 'categories:create <title> [options]';
        this.description = 'Create a category with the specified title and guide in your ReadMe project.';
        this.cmdCategory = baseCommand_1.CommandCategories.CATEGORIES;
        this.hiddenArgs = ['title'];
        this.args = [
            this.getKeyArg(),
            this.getVersionArg(),
            {
                name: 'title',
                type: String,
                defaultOption: true,
            },
            {
                name: 'categoryType',
                type: String,
                description: 'Category type, must be `guide` or `reference`',
            },
            {
                name: 'preventDuplicates',
                type: Boolean,
                description: 'Prevents the creation of a new category if there is an existing category with a matching `categoryType` and `title`',
            },
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { categoryType, title, key, version, preventDuplicates } = opts;
        if (!title) {
            return Promise.reject(new Error(`No title provided. Usage \`${config_1.default.get('cli')} ${this.usage}\`.`));
        }
        if (categoryType !== 'guide' && categoryType !== 'reference') {
            return Promise.reject(new Error('`categoryType` must be `guide` or `reference`.'));
        }
        const selectedVersion = await (0, versionSelect_1.getProjectVersion)(version, key);
        baseCommand_1.default.debug(`selectedVersion: ${selectedVersion}`);
        async function matchCategory() {
            const allCategories = await (0, getCategories_1.default)(key, selectedVersion);
            return allCategories.find((category) => {
                return category.title.trim().toLowerCase() === title.trim().toLowerCase() && category.type === categoryType;
            });
        }
        async function createCategory() {
            if (preventDuplicates) {
                const matchedCategory = await matchCategory();
                if (typeof matchedCategory !== 'undefined') {
                    return Promise.reject(new Error(`The '${matchedCategory.title}' category with a type of '${matchedCategory.type}' already exists with an id of '${matchedCategory.id}'. A new category was not created.`));
                }
            }
            return (0, readmeAPIFetch_1.default)('/api/v1/categories', {
                method: 'post',
                headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                    'x-readme-version': selectedVersion,
                    'Content-Type': 'application/json',
                })),
                body: JSON.stringify({
                    title,
                    type: categoryType,
                }),
            })
                .then(readmeAPIFetch_1.handleRes)
                .then(res => `ðŸŒ± successfully created '${res.title}' with a type of '${res.type}' and an id of '${res.id}'`);
        }
        const createdCategory = chalk_1.default.green(await createCategory());
        return Promise.resolve(createdCategory);
    }
}
exports.default = CategoriesCreateCommand;
