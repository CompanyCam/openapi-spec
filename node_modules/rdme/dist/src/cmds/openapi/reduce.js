"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const oas_1 = __importDefault(require("oas"));
const reducer_1 = __importDefault(require("oas/dist/lib/reducer"));
const ora_1 = __importDefault(require("ora"));
const prompts_1 = __importDefault(require("prompts"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const logger_1 = require("../../lib/logger");
const prepareOas_1 = __importDefault(require("../../lib/prepareOas"));
const promptWrapper_1 = __importDefault(require("../../lib/promptWrapper"));
const validatePromptInput_1 = require("../../lib/validatePromptInput");
class OpenAPIReduceCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'openapi:reduce';
        this.usage = 'openapi:reduce [file|url] [options]';
        this.description = 'Reduce an OpenAPI definition into a smaller subset.';
        this.cmdCategory = baseCommand_1.CommandCategories.APIS;
        this.hiddenArgs = ['spec'];
        this.args = [
            {
                name: 'spec',
                type: String,
                defaultOption: true,
            },
            {
                name: 'tag',
                type: String,
                multiple: true,
                description: 'Tags to reduce by',
            },
            {
                name: 'path',
                type: String,
                multiple: true,
                description: 'Paths to reduce by',
            },
            {
                name: 'method',
                type: String,
                multiple: true,
                description: 'Methods to reduce by (can only be used alongside the `path` option)',
            },
            {
                name: 'out',
                type: String,
                description: 'Output file path to write reduced file to',
            },
            this.getTitleArg(),
            this.getWorkingDirArg(),
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { spec, title, workingDirectory } = opts;
        if (workingDirectory) {
            const previousWorkingDirectory = process.cwd();
            process.chdir(workingDirectory);
            baseCommand_1.default.debug(`switching working directory from ${previousWorkingDirectory} to ${process.cwd()}`);
        }
        const { preparedSpec, specPath, specType } = await (0, prepareOas_1.default)(spec, 'openapi:reduce', { title });
        const parsedPreparedSpec = JSON.parse(preparedSpec);
        if (specType !== 'OpenAPI') {
            throw new Error('Sorry, this reducer feature in rdme only supports OpenAPI 3.0+ definitions.');
        }
        if ((opts.path?.length || opts.method?.length) && opts.tag?.length) {
            throw new Error('You can pass in either tags or paths/methods, but not both.');
        }
        prompts_1.default.override({
            reduceBy: opts.tag?.length ? 'tags' : opts.path?.length ? 'paths' : undefined,
            tags: opts.tag,
            paths: opts.path,
            methods: opts.method,
            outputPath: opts.out,
        });
        const promptResults = await (0, promptWrapper_1.default)([
            {
                type: 'select',
                name: 'reduceBy',
                message: 'Would you like to reduce by paths or tags?',
                choices: [
                    { title: 'Tags', value: 'tags' },
                    { title: 'Paths', value: 'paths' },
                ],
            },
            {
                type: (prev, values) => (values.reduceBy === 'tags' ? 'multiselect' : null),
                name: 'tags',
                message: 'Choose which tags to reduce by:',
                min: 1,
                choices: () => {
                    const tags = new oas_1.default(parsedPreparedSpec).getTags();
                    return tags.map(tag => ({
                        title: tag,
                        value: tag,
                    }));
                },
            },
            {
                type: (prev, values) => (values.reduceBy === 'paths' ? 'multiselect' : null),
                name: 'paths',
                message: 'Choose which paths to reduce by:',
                min: 1,
                choices: () => {
                    return Object.keys(parsedPreparedSpec.paths).map(p => ({
                        title: p,
                        value: p,
                    }));
                },
            },
            {
                type: (prev, values) => (values.reduceBy === 'paths' ? 'multiselect' : null),
                name: 'methods',
                message: 'Choose which HTTP methods that are available across these paths to reduce by:',
                min: 1,
                choices: (prev, values) => {
                    const paths = values.paths;
                    let methods = paths
                        .map((p) => Object.keys(parsedPreparedSpec.paths[p] || {}))
                        .flat()
                        .filter((method) => method.toLowerCase() !== 'parameters');
                    // We have to catch this case so prompt doesn't crash
                    if (!methods.length && !opts.method?.length) {
                        throw new Error('All paths in the API definition were removed. Did you supply the right path name to reduce by?');
                    }
                    methods = [...new Set(methods)];
                    methods.sort();
                    return methods.map((method) => ({
                        title: method.toUpperCase(),
                        value: method,
                    }));
                },
            },
            {
                type: 'text',
                name: 'outputPath',
                message: 'Enter the path to save your reduced API definition to:',
                initial: () => {
                    const extension = path_1.default.extname(specPath);
                    return `${path_1.default.basename(specPath).split(extension)[0]}.reduced${extension}`;
                },
                validate: value => (0, validatePromptInput_1.validateFilePath)(value),
            },
        ]);
        baseCommand_1.default.debug(`reducing by ${promptResults.reduceBy}`);
        baseCommand_1.default.debug(`options being supplied to the reducer: ${JSON.stringify({
            tags: promptResults.tags,
            paths: promptResults.paths,
            methods: promptResults.methods,
        })}`);
        baseCommand_1.default.debug(`about to reduce spec located at ${specPath}`);
        const spinner = (0, ora_1.default)({ ...(0, logger_1.oraOptions)() });
        spinner.start('Reducing your API definition...');
        let reducedSpec;
        try {
            reducedSpec = (0, reducer_1.default)(parsedPreparedSpec, {
                tags: promptResults.tags || [],
                paths: (promptResults.paths || []).reduce((acc, p) => {
                    acc[p] = promptResults.methods;
                    return acc;
                }, {}),
            });
            spinner.succeed(`${spinner.text} done! ‚úÖ`);
        }
        catch (err) {
            baseCommand_1.default.debug(`reducer err: ${err.message}`);
            spinner.fail();
            throw err;
        }
        baseCommand_1.default.debug(`saving reduced spec to ${promptResults.outputPath}`);
        fs_1.default.writeFileSync(promptResults.outputPath, JSON.stringify(reducedSpec, null, 2));
        baseCommand_1.default.debug('reduced spec saved');
        return Promise.resolve(chalk_1.default.green(`Your reduced API definition has been saved to ${promptResults.outputPath}! ü§è`));
    }
}
exports.default = OpenAPIReduceCommand;
