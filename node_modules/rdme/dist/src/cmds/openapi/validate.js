"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const createGHA_1 = __importDefault(require("../../lib/createGHA"));
const prepareOas_1 = __importDefault(require("../../lib/prepareOas"));
class OpenAPIValidateCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'openapi:validate';
        this.usage = 'openapi:validate [file|url] [options]';
        this.description = 'Validate your OpenAPI/Swagger definition.';
        this.cmdCategory = baseCommand_1.CommandCategories.APIS;
        this.hiddenArgs = ['spec'];
        this.args = [
            {
                name: 'spec',
                type: String,
                defaultOption: true,
            },
            this.getWorkingDirArg(),
            this.getGitHubArg(),
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { spec, workingDirectory } = opts;
        if (workingDirectory) {
            const previousWorkingDirectory = process.cwd();
            process.chdir(workingDirectory);
            baseCommand_1.default.debug(`switching working directory from ${previousWorkingDirectory} to ${process.cwd()}`);
        }
        const { specPath, specType } = await (0, prepareOas_1.default)(spec, 'openapi:validate');
        return Promise.resolve(chalk_1.default.green(`${specPath} is a valid ${specType} API definition!`)).then(msg => (0, createGHA_1.default)(msg, this.command, this.args, { ...opts, spec: specPath }));
    }
}
exports.default = OpenAPIValidateCommand;
