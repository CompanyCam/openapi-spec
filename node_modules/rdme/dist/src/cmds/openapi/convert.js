"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const prompts_1 = __importDefault(require("prompts"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const prepareOas_1 = __importDefault(require("../../lib/prepareOas"));
const promptWrapper_1 = __importDefault(require("../../lib/promptWrapper"));
const validatePromptInput_1 = require("../../lib/validatePromptInput");
class OpenAPIConvertCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'openapi:convert';
        this.usage = 'openapi:convert [file|url] [options]';
        this.description = 'Convert a Swagger or Postman Collection to OpenAPI.';
        this.cmdCategory = baseCommand_1.CommandCategories.APIS;
        this.hiddenArgs = ['spec'];
        this.args = [
            {
                name: 'spec',
                type: String,
                defaultOption: true,
            },
            {
                name: 'out',
                type: String,
                description: 'Output file path to write converted file to',
            },
            this.getWorkingDirArg(),
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { spec, workingDirectory } = opts;
        if (workingDirectory) {
            const previousWorkingDirectory = process.cwd();
            process.chdir(workingDirectory);
            baseCommand_1.default.debug(`switching working directory from ${previousWorkingDirectory} to ${process.cwd()}`);
        }
        const { preparedSpec, specPath, specType } = await (0, prepareOas_1.default)(spec, 'openapi:convert', { convertToLatest: true });
        const parsedPreparedSpec = JSON.parse(preparedSpec);
        if (specType === 'OpenAPI') {
            throw new Error("Sorry, this API definition is already an OpenAPI definition and doesn't need to be converted.");
        }
        prompts_1.default.override({
            outputPath: opts.out,
        });
        const promptResults = await (0, promptWrapper_1.default)([
            {
                type: 'text',
                name: 'outputPath',
                message: 'Enter the path to save your converted API definition to:',
                initial: () => {
                    const extension = path_1.default.extname(specPath);
                    return `${path_1.default.basename(specPath).split(extension)[0]}.openapi${extension}`;
                },
                validate: value => (0, validatePromptInput_1.validateFilePath)(value),
            },
        ]);
        baseCommand_1.default.debug(`saving converted spec to ${promptResults.outputPath}`);
        fs_1.default.writeFileSync(promptResults.outputPath, JSON.stringify(parsedPreparedSpec, null, 2));
        baseCommand_1.default.debug('converted spec saved');
        return Promise.resolve(chalk_1.default.green(`Your converted API definition has been saved to ${promptResults.outputPath}!`));
    }
}
exports.default = OpenAPIConvertCommand;
