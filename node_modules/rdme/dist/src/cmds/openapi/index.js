"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const node_fetch_1 = require("node-fetch");
const ora_1 = __importDefault(require("ora"));
const parse_link_header_1 = __importDefault(require("parse-link-header"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const createGHA_1 = __importDefault(require("../../lib/createGHA"));
const logger_1 = require("../../lib/logger");
const prepareOas_1 = __importDefault(require("../../lib/prepareOas"));
const promptHandler = __importStar(require("../../lib/prompts"));
const promptWrapper_1 = __importDefault(require("../../lib/promptWrapper"));
const readmeAPIFetch_1 = __importStar(require("../../lib/readmeAPIFetch"));
const streamSpecToRegistry_1 = __importDefault(require("../../lib/streamSpecToRegistry"));
const versionSelect_1 = require("../../lib/versionSelect");
class OpenAPICommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'openapi';
        this.usage = 'openapi [file|url] [options]';
        this.description = 'Upload, or resync, your OpenAPI/Swagger definition to ReadMe.';
        this.cmdCategory = baseCommand_1.CommandCategories.APIS;
        this.hiddenArgs = ['spec'];
        this.args = [
            this.getKeyArg(),
            {
                name: 'id',
                type: String,
                description: "Unique identifier for your API definition. Use this if you're re-uploading an existing API definition.",
            },
            this.getVersionArg(),
            {
                name: 'spec',
                type: String,
                defaultOption: true,
            },
            this.getWorkingDirArg(),
            {
                name: 'useSpecVersion',
                type: Boolean,
                description: 'Uses the version listed in the `info.version` field in the API definition for the project version parameter.',
            },
            {
                name: 'raw',
                type: Boolean,
                description: 'Return the command results as a JSON object instead of a pretty output.',
            },
            this.getGitHubArg(),
            {
                name: 'create',
                type: Boolean,
                description: 'Bypasses the create/update prompt and creates a new API definition.',
            },
            {
                name: 'update',
                type: Boolean,
                description: "Automatically update an existing API definition in ReadMe if it's the only one associated with the current version.",
            },
            this.getTitleArg(),
            {
                name: 'dryRun',
                type: Boolean,
                description: 'Runs the command without creating/updating any API Definitions in ReadMe. Useful for debugging.',
            },
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { dryRun, key, id, spec, create, raw, title, useSpecVersion, version, workingDirectory, update } = opts;
        let selectedVersion = version;
        let isUpdate;
        const spinner = (0, ora_1.default)({ ...(0, logger_1.oraOptions)() });
        /**
         * The `version` and `update` parameters are not typically ones we'd want to include
         * in GitHub Actions workflow files, so we're going to collect them in this object.
         */
        const ignoredGHAParameters = { version: undefined, update: undefined };
        if (dryRun) {
            baseCommand_1.default.warn('ðŸŽ­ dry run option detected! No API definitions will be created or updated in ReadMe.');
        }
        if (create && update) {
            throw new Error('The `--create` and `--update` options cannot be used simultaneously. Please use one or the other!');
        }
        if (workingDirectory) {
            const previousWorkingDirectory = process.cwd();
            process.chdir(workingDirectory);
            baseCommand_1.default.debug(`switching working directory from ${previousWorkingDirectory} to ${process.cwd()}`);
        }
        if (version && id) {
            baseCommand_1.default.warn("We'll be using the version associated with the `--id` option, so the `--version` option will be ignored.");
        }
        if (create && id) {
            baseCommand_1.default.warn("We'll be using the `--create` option, so the `--id` parameter will be ignored.");
        }
        if (update && id) {
            baseCommand_1.default.warn("We'll be updating the API definition associated with the `--id` parameter, so the `--update` parameter will be ignored.");
        }
        // Reason we're hardcoding in command here is because `swagger` command
        // relies on this and we don't want to use `swagger` in this function
        const { preparedSpec, specFileType, specPath, specType, specVersion } = await (0, prepareOas_1.default)(spec, 'openapi', {
            title,
        });
        if (useSpecVersion) {
            baseCommand_1.default.info(`Using the version specified in your API definition for your ReadMe project version (${specVersion})`);
            selectedVersion = specVersion;
        }
        if (create || !id) {
            selectedVersion = await (0, versionSelect_1.getProjectVersion)(selectedVersion, key);
        }
        baseCommand_1.default.debug(`selectedVersion: ${selectedVersion}`);
        const success = async (data) => {
            const message = !isUpdate
                ? `You've successfully uploaded a new ${specType} file to your ReadMe project!`
                : `You've successfully updated an existing ${specType} file on your ReadMe project!`;
            const body = await (0, readmeAPIFetch_1.handleRes)(data, false);
            const output = {
                commandType: isUpdate ? 'update' : 'create',
                docs: data.headers.get('location'),
                // eslint-disable-next-line no-underscore-dangle
                id: body._id,
                specPath,
                specType,
                version: selectedVersion,
            };
            const prettyOutput = [
                message,
                '',
                `\t${chalk_1.default.green(output.docs)}`,
                '',
                `To update your ${specType} definition, run the following:`,
                '',
                `\t${chalk_1.default.green(`rdme openapi ${specPath} --key=<key> --id=${output.id}`)}`,
            ].join('\n');
            return Promise.resolve(raw ? JSON.stringify(output, null, 2) : prettyOutput).then(msg => (0, createGHA_1.default)(msg, this.command, this.args, {
                ...opts,
                spec: specPath,
                // eslint-disable-next-line no-underscore-dangle
                id: body._id,
                version: selectedVersion,
                ...ignoredGHAParameters,
            }));
        };
        const error = (res) => {
            return (0, readmeAPIFetch_1.handleRes)(res).catch(err => {
                // If we receive an APIError, no changes needed! Throw it as is.
                if (err.name === 'APIError') {
                    throw err;
                }
                // If we receive certain text responses, it's likely a 5xx error from our server.
                if (typeof err === 'string' &&
                    (err.includes('<title>Application Error</title>') || // Heroku error
                        err.includes('520: Web server is returning an unknown error</title>')) // Cloudflare error
                ) {
                    throw new Error("We're sorry, your upload request timed out. Please try again or split your file up into smaller chunks.");
                }
                // As a fallback, we throw a more generic error.
                throw new Error(`Yikes, something went wrong! Please try uploading your spec again and if the problem persists, get in touch with our support team at ${chalk_1.default.underline('support@readme.io')}.`);
            });
        };
        const registryUUID = await (0, streamSpecToRegistry_1.default)(preparedSpec);
        const options = {
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                'x-readme-version': selectedVersion,
            })),
            body: JSON.stringify({ registryUUID }),
        };
        function createSpec() {
            if (dryRun) {
                return `ðŸŽ­ dry run! The API Definition located at ${specPath} will be created for this project version: ${selectedVersion}`;
            }
            options.method = 'post';
            spinner.start('Creating your API docs in ReadMe...');
            return (0, readmeAPIFetch_1.default)('/api/v1/api-specification', options, {
                filePath: specPath,
                fileType: specFileType,
            }).then(res => {
                if (res.ok) {
                    spinner.succeed(`${spinner.text} done! ðŸ¦‰`);
                    return success(res);
                }
                spinner.fail();
                return error(res);
            });
        }
        function updateSpec(specId) {
            if (dryRun) {
                return `ðŸŽ­ dry run! The API Definition located at ${specPath} will update this API Definition ID: ${specId}`;
            }
            isUpdate = true;
            options.method = 'put';
            spinner.start('Updating your API docs in ReadMe...');
            return (0, readmeAPIFetch_1.default)(`/api/v1/api-specification/${specId}`, options, {
                filePath: specPath,
                fileType: specFileType,
            }).then(res => {
                if (res.ok) {
                    spinner.succeed(`${spinner.text} done! ðŸ¦‰`);
                    return success(res);
                }
                spinner.fail();
                return error(res);
            });
        }
        /*
            Create a new OAS file in Readme:
              - Enter flow if user does not pass an id as cli arg
              - Check to see if any existing files exist with a specific version
              - If none exist, default to creating a new instance of a spec
              - If found, prompt user to either create a new spec or update an existing one
          */
        function getSpecs(url) {
            return (0, readmeAPIFetch_1.default)(url, {
                method: 'get',
                headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                    'x-readme-version': selectedVersion,
                })),
            });
        }
        if (create) {
            ignoredGHAParameters.id = undefined;
            delete ignoredGHAParameters.version;
            return createSpec();
        }
        if (!id) {
            baseCommand_1.default.debug('no id parameter, retrieving list of API specs');
            const apiSettings = await getSpecs('/api/v1/api-specification');
            const totalPages = Math.ceil(parseInt(apiSettings.headers.get('x-total-count'), 10) / 10);
            const parsedDocs = (0, parse_link_header_1.default)(apiSettings.headers.get('link'));
            baseCommand_1.default.debug(`total pages: ${totalPages}`);
            baseCommand_1.default.debug(`pagination result: ${JSON.stringify(parsedDocs)}`);
            const apiSettingsBody = await (0, readmeAPIFetch_1.handleRes)(apiSettings);
            if (!apiSettingsBody.length)
                return createSpec();
            if (update) {
                if (apiSettingsBody.length > 1) {
                    throw new Error(`The \`--update\` option cannot be used when there's more than one API definition available (found ${apiSettingsBody.length}).`);
                }
                const { _id: specId } = apiSettingsBody[0];
                return updateSpec(specId);
            }
            // @todo: figure out how to add a stricter type here, see:
            // https://github.com/readmeio/rdme/pull/570#discussion_r949715913
            const { option } = await (0, promptWrapper_1.default)(promptHandler.createOasPrompt(apiSettingsBody, parsedDocs, totalPages, getSpecs));
            baseCommand_1.default.debug(`selection result: ${option}`);
            return option === 'create' ? createSpec() : updateSpec(option);
        }
        /*
            Update an existing OAS file in Readme:
              - Enter flow if user passes an id as cli arg
          */
        return updateSpec(id);
    }
}
exports.default = OpenAPICommand;
