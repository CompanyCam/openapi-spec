"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const config_1 = __importDefault(require("config"));
const node_fetch_1 = require("node-fetch");
const editor_1 = __importDefault(require("editor"));
const apiError_1 = __importDefault(require("../../lib/apiError"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const isHidden_1 = __importDefault(require("../../lib/decorators/isHidden"));
const readmeAPIFetch_1 = __importStar(require("../../lib/readmeAPIFetch"));
const versionSelect_1 = require("../../lib/versionSelect");
const writeFile = (0, util_1.promisify)(fs_1.default.writeFile);
const readFile = (0, util_1.promisify)(fs_1.default.readFile);
const unlink = (0, util_1.promisify)(fs_1.default.unlink);
let DocsEditCommand = class DocsEditCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'docs:edit';
        this.usage = 'docs:edit <slug> [options]';
        this.description = 'Edit a single file from your ReadMe project without saving locally. [deprecated]';
        this.cmdCategory = baseCommand_1.CommandCategories.DOCS;
        this.hiddenArgs = ['slug'];
        this.args = [
            this.getKeyArg(),
            this.getVersionArg(),
            {
                name: 'slug',
                type: String,
                defaultOption: true,
            },
        ];
    }
    async run(opts) {
        baseCommand_1.default.warn('`rdme docs:edit` is now deprecated and will be removed in a future release.');
        await super.run(opts);
        const { slug, key, version } = opts;
        if (!slug) {
            return Promise.reject(new Error(`No slug provided. Usage \`${config_1.default.get('cli')} ${this.usage}\`.`));
        }
        const selectedVersion = await (0, versionSelect_1.getProjectVersion)(version, key);
        baseCommand_1.default.debug(`selectedVersion: ${selectedVersion}`);
        const filename = `${slug}.md`;
        const existingDoc = await (0, readmeAPIFetch_1.default)(`/api/v1/docs/${slug}`, {
            method: 'get',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                'x-readme-version': selectedVersion,
                Accept: 'application/json',
            })),
        }).then(readmeAPIFetch_1.handleRes);
        await writeFile(filename, existingDoc.body);
        baseCommand_1.default.debug(`wrote to local file: ${filename}, opening editor`);
        return new Promise((resolve, reject) => {
            (opts.mockEditor || editor_1.default)(filename, async (code) => {
                baseCommand_1.default.debug(`editor closed with code ${code}`);
                if (code !== 0)
                    return reject(new Error('Non zero exit code from $EDITOR'));
                const updatedDoc = await readFile(filename, 'utf8');
                baseCommand_1.default.debug(`read edited contents of ${filename}, sending to ReadMe`);
                return (0, readmeAPIFetch_1.default)(`/api/v1/docs/${slug}`, {
                    method: 'put',
                    headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                        'x-readme-version': selectedVersion,
                        'Content-Type': 'application/json',
                    })),
                    body: JSON.stringify(Object.assign(existingDoc, {
                        body: updatedDoc,
                    })),
                })
                    .then(res => (0, readmeAPIFetch_1.handleRes)(res, false))
                    .then(async (res) => {
                    // We need to use the `reject` function from
                    // the Promise that's wrapping this function.
                    if (res.error) {
                        return reject(new apiError_1.default(res));
                    }
                    baseCommand_1.default.info('Doc successfully updated. Cleaning up local file.');
                    await unlink(filename);
                    baseCommand_1.default.debug('file unlinked');
                    // Normally we should resolve with a value that is logged to the console,
                    // but since we need to wait for the temporary file to be removed,
                    // it's okay to resolve the promise with no value.
                    return resolve(undefined);
                });
            });
        });
    }
};
DocsEditCommand = __decorate([
    isHidden_1.default
], DocsEditCommand);
exports.default = DocsEditCommand;
