"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const config_1 = __importDefault(require("config"));
const prompts_1 = __importDefault(require("prompts"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const createGHA_1 = __importDefault(require("../../lib/createGHA"));
const deleteDoc_1 = __importDefault(require("../../lib/deleteDoc"));
const getDocs_1 = __importDefault(require("../../lib/getDocs"));
const promptWrapper_1 = __importDefault(require("../../lib/promptWrapper"));
const readdirRecursive_1 = __importDefault(require("../../lib/readdirRecursive"));
const readDoc_1 = __importDefault(require("../../lib/readDoc"));
const versionSelect_1 = require("../../lib/versionSelect");
function getSlug(filename) {
    const { slug } = (0, readDoc_1.default)(filename);
    return slug;
}
class DocsPruneCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'docs:prune';
        this.usage = 'docs:prune <folder> [options]';
        this.description = 'Delete any docs from ReadMe if their slugs are not found in the target folder.';
        this.cmdCategory = baseCommand_1.CommandCategories.DOCS;
        this.hiddenArgs = ['folder'];
        this.args = [
            this.getKeyArg(),
            this.getVersionArg(),
            {
                name: 'folder',
                type: String,
                defaultOption: true,
            },
            this.getGitHubArg(),
            {
                name: 'confirm',
                type: Boolean,
                description: 'Bypass the confirmation prompt. Useful for CI environments.',
            },
            {
                name: 'dryRun',
                type: Boolean,
                description: 'Runs the command without creating/updating any docs in ReadMe. Useful for debugging.',
            },
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { dryRun, folder, key, version } = opts;
        if (!folder) {
            return Promise.reject(new Error(`No folder provided. Usage \`${config_1.default.get('cli')} ${this.usage}\`.`));
        }
        // TODO: should we allow version selection at all here?
        // Let's revisit this once we re-evaluate our category logic in the API.
        // Ideally we should ignore this parameter entirely if the category is included.
        const selectedVersion = await (0, versionSelect_1.getProjectVersion)(version, key);
        baseCommand_1.default.debug(`selectedVersion: ${selectedVersion}`);
        // Strip out non-markdown files
        const files = (0, readdirRecursive_1.default)(folder).filter(file => file.toLowerCase().endsWith('.md') || file.toLowerCase().endsWith('.markdown'));
        baseCommand_1.default.debug(`number of files: ${files.length}`);
        prompts_1.default.override(opts);
        const { confirm } = await (0, promptWrapper_1.default)({
            type: 'confirm',
            name: 'confirm',
            message: `This command will delete all guides page from your ReadMe project (version ${selectedVersion}) that are not also in ${folder}, would you like to confirm?`,
        });
        if (!confirm) {
            return Promise.reject(new Error('Aborting, no changes were made.'));
        }
        const docs = await (0, getDocs_1.default)(key, selectedVersion);
        const docSlugs = docs.map(({ slug }) => slug);
        const fileSlugs = new Set(files.map(getSlug));
        const slugsToDelete = docSlugs.filter((slug) => !fileSlugs.has(slug));
        const deletedDocs = await Promise.all(slugsToDelete.map((slug) => (0, deleteDoc_1.default)(key, selectedVersion, dryRun, slug, this.cmdCategory)));
        return Promise.resolve(chalk_1.default.green(deletedDocs.join('\n'))).then(msg => (0, createGHA_1.default)(msg, this.command, this.args, { ...opts, version: selectedVersion }));
    }
}
exports.default = DocsPruneCommand;
