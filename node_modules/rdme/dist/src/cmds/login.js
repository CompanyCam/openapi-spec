"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = __importDefault(require("prompts"));
const baseCommand_1 = __importStar(require("../lib/baseCommand"));
const loginFlow_1 = __importDefault(require("../lib/loginFlow"));
class LoginCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'login';
        this.usage = 'login [options]';
        this.description = 'Login to a ReadMe project.';
        this.cmdCategory = baseCommand_1.CommandCategories.ADMIN;
        this.args = [
            {
                name: 'email',
                type: String,
                description: 'Your email address',
            },
            {
                name: 'password',
                type: String,
                description: 'Your password',
            },
            {
                name: 'otp',
                type: String,
                description: 'Your one-time password (if you have two-factor authentication enabled)',
            },
            {
                name: 'project',
                type: String,
                description: 'The subdomain of the project you wish to log into',
            },
        ];
    }
    async run(opts) {
        await super.run(opts);
        prompts_1.default.override(opts);
        return (0, loginFlow_1.default)(opts.otp);
    }
}
exports.default = LoginCommand;
