"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const config_1 = __importDefault(require("config"));
const open_1 = __importDefault(require("open"));
const baseCommand_1 = __importStar(require("../lib/baseCommand"));
const getCurrentConfig_1 = __importDefault(require("../lib/getCurrentConfig"));
const versionSelect_1 = require("../lib/versionSelect");
class OpenCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'open';
        this.usage = 'open';
        this.description = 'Open your current ReadMe project in the browser.';
        this.cmdCategory = baseCommand_1.CommandCategories.UTILITIES;
        this.args = [
            {
                name: 'dash',
                type: Boolean,
                description: 'Opens your current ReadMe project dashboard.',
            },
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { dash } = opts;
        const { apiKey, project } = (0, getCurrentConfig_1.default)();
        baseCommand_1.default.debug(`project: ${project}`);
        if (!project) {
            return Promise.reject(new Error(`Please login using \`${config_1.default.get('cli')} login\`.`));
        }
        let url;
        if (dash) {
            if (!apiKey) {
                return Promise.reject(new Error(`Please login using \`${config_1.default.get('cli')} login\`.`));
            }
            const selectedVersion = await (0, versionSelect_1.getProjectVersion)(undefined, apiKey, true);
            const dashURL = config_1.default.get('host');
            url = `${dashURL}/project/${project}/v${selectedVersion}/overview`;
        }
        else {
            const hubURL = config_1.default.get('hub');
            url = hubURL.replace('{project}', project);
        }
        return (opts.mockOpen || open_1.default)(url, {
            wait: false,
        }).then(() => Promise.resolve(`Opening ${chalk_1.default.green(url)} in your browser...`));
    }
}
exports.default = OpenCommand;
