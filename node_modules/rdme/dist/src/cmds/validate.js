"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const baseCommand_1 = __importDefault(require("../lib/baseCommand"));
const isHidden_1 = __importDefault(require("../lib/decorators/isHidden"));
const validate_1 = __importDefault(require("./openapi/validate"));
let ValidateAliasCommand = class ValidateAliasCommand extends validate_1.default {
    constructor() {
        super();
        this.command = 'validate';
        this.usage = 'validate [file] [options]';
        this.description = 'Alias for `rdme openapi:validate` [deprecated].';
    }
    async run(opts) {
        baseCommand_1.default.warn('`rdme validate` has been deprecated. Please use `rdme openapi:validate` instead.');
        return super.run(opts);
    }
};
ValidateAliasCommand = __decorate([
    isHidden_1.default
], ValidateAliasCommand);
exports.default = ValidateAliasCommand;
