"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const prompts_1 = __importDefault(require("prompts"));
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const castStringOptToBool_1 = __importDefault(require("../../lib/castStringOptToBool"));
const promptHandler = __importStar(require("../../lib/prompts"));
const promptWrapper_1 = __importDefault(require("../../lib/promptWrapper"));
const readmeAPIFetch_1 = __importStar(require("../../lib/readmeAPIFetch"));
const versionSelect_1 = require("../../lib/versionSelect");
class UpdateVersionCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'versions:update';
        this.usage = 'versions:update <version> [options]';
        this.description = 'Update an existing version for your project.';
        this.cmdCategory = baseCommand_1.CommandCategories.VERSIONS;
        this.hiddenArgs = ['version'];
        this.args = [
            this.getKeyArg(),
            {
                name: 'newVersion',
                type: String,
                description: 'What should the version be renamed to?',
            },
            ...this.getVersionOpts(),
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { key, version, newVersion, codename, main, beta, isPublic, deprecated } = opts;
        const selectedVersion = await (0, versionSelect_1.getProjectVersion)(version, key);
        baseCommand_1.default.debug(`selectedVersion: ${selectedVersion}`);
        // TODO: I think this fetch here is unnecessary but
        // it will require a bigger refactor of getProjectVersion
        const foundVersion = await (0, readmeAPIFetch_1.default)(`/api/v1/version/${selectedVersion}`, {
            method: 'get',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key),
        }).then(readmeAPIFetch_1.handleRes);
        prompts_1.default.override({
            is_beta: (0, castStringOptToBool_1.default)(beta, 'beta'),
            is_deprecated: (0, castStringOptToBool_1.default)(deprecated, 'deprecated'),
            is_public: (0, castStringOptToBool_1.default)(isPublic, 'isPublic'),
            is_stable: (0, castStringOptToBool_1.default)(main, 'main'),
            newVersion,
        });
        const promptResponse = await (0, promptWrapper_1.default)(promptHandler.versionPrompt([], foundVersion));
        const body = {
            codename,
            // fall back to current version if user didn't enter one
            version: promptResponse.newVersion || version,
            is_beta: promptResponse.is_beta,
            is_deprecated: promptResponse.is_deprecated,
            // if the "is public" question was never asked, we should omit that from the payload
            is_hidden: typeof promptResponse.is_public === 'undefined' ? undefined : !promptResponse.is_public,
            is_stable: promptResponse.is_stable,
        };
        return (0, readmeAPIFetch_1.default)(`/api/v1/version/${selectedVersion}`, {
            method: 'put',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key, new node_fetch_1.Headers({
                Accept: 'application/json',
                'Content-Type': 'application/json',
            })),
            body: JSON.stringify(body),
        })
            .then(readmeAPIFetch_1.handleRes)
            .then(() => {
            return Promise.resolve(`Version ${selectedVersion} updated successfully.`);
        });
    }
}
exports.default = UpdateVersionCommand;
