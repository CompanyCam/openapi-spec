"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const baseCommand_1 = __importStar(require("../../lib/baseCommand"));
const readmeAPIFetch_1 = __importStar(require("../../lib/readmeAPIFetch"));
class VersionsCommand extends baseCommand_1.default {
    constructor() {
        super();
        this.command = 'versions';
        this.usage = 'versions [options]';
        this.description = 'List versions available in your project or get a version by SemVer (https://semver.org/).';
        this.cmdCategory = baseCommand_1.CommandCategories.VERSIONS;
        this.args = [
            this.getKeyArg(),
            {
                name: 'version',
                type: String,
                description: 'A specific project version to view.',
            },
        ];
    }
    async run(opts) {
        await super.run(opts);
        const { key, version } = opts;
        const uri = version ? `/api/v1/version/${version}` : '/api/v1/version';
        return (0, readmeAPIFetch_1.default)(uri, {
            method: 'get',
            headers: (0, readmeAPIFetch_1.cleanHeaders)(key),
        })
            .then(readmeAPIFetch_1.handleRes)
            .then(data => Promise.resolve(JSON.stringify(data, null, 2)));
    }
}
exports.default = VersionsCommand;
